package gov.nasa.ziggy.buildutil;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.gradle.api.DefaultTask;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;

import com.google.common.collect.ImmutableList;

/**
 * Places version info in the property file {@value #BUILD_CONFIGURATION}). The available Gradle
 * properties used to set the names of the various properties that describe the version include:
 * <dl>
 * <dt>{@code versionPropertyName}</dt>
 * <dd>name of the property that holds the output of {@code git describe} (default:
 * {@value #DEFAULT_BUILD_VERSION_PROPERTY_NAME})</dd>
 * <dt>{@code branchPropertyName}</dt>
 * <dd>name of the property that contains the name of the current branch
 * (default:{@value #DEFAULT_BUILD_BRANCH_PROPERTY_NAME})</dd>
 * <dt>{@code commitPropertyName}</dt>
 * <dd>name of the property that contains the commit
 * (default:{@value #DEFAULT_BUILD_COMMIT_PROPERTY_NAME})</dd>
 * </dl>
 * <p>
 * The following example shows how to to run this plugin only when necessary by saving the current
 * Git version in a property called {@code ziggyVersion}. The default values of the aforementioned
 * properties are used.
 *
 * <pre>
 * import gov.nasa.ziggy.buildutil.ZiggyVersionGenerator
 *
 * def gitVersion = new ByteArrayOutputStream()
 * exec {
 *     commandLine "git", "rev-parse", "HEAD"
 *     standardOutput = gitVersion
 * }
 * gitVersion = gitVersion.toString().trim()
 *
 * task ziggyVersion(type: ZiggyVersionGenerator) {
 *     inputs.property "ziggyVersion", gitVersion
 * }
 * </pre>
 *
 * See ZiggyConfiguration.
 */
public class ZiggyVersionGenerator extends DefaultTask {

    private static final String BUILD_CONFIGURATION = "src/main/resources/ziggy-build.properties";
    private static final String DEFAULT_BUILD_VERSION_PROPERTY_NAME = "ziggy.version";
    private static final String DEFAULT_BUILD_BRANCH_PROPERTY_NAME = "ziggy.version.branch";
    private static final String DEFAULT_BUILD_COMMIT_PROPERTY_NAME = "ziggy.version.commit";

    /**
     * Length that object names are abbreviated to. The number is set to 10, because that is
     * currently 1 more than necessary to distinguish all commit hashes to date. One command to
     * determine the maximum hash length in use is:
     *
     * <pre>
     * $ git rev-list --all --abbrev=0 --abbrev-commit | awk '{print length()}' | sort -n | uniq -c
     * 1040 4
     * 7000 5
     * 1149 6
     *   68 7
     *    8 8
     *    1 9
     * </pre>
     */
    private static final int ABBREV = 10;

    private static final String HEADER = "# This file is automatically generated by Gradle."
        + System.lineSeparator();

    private String versionPropertyName = DEFAULT_BUILD_VERSION_PROPERTY_NAME;
    private String branchPropertyName = DEFAULT_BUILD_BRANCH_PROPERTY_NAME;
    private String commitPropertyName = DEFAULT_BUILD_COMMIT_PROPERTY_NAME;

    @TaskAction
    public void generateVersionProperties() throws IOException, InterruptedException {

        File outputFile = new File(getProject().getProjectDir(), getBuildConfiguration());

        try (BufferedWriter output = new BufferedWriter(new FileWriter(outputFile))) {
            output.write(HEADER);
            output.write(getVersionPropertyName() + " = "
                + runCommand(ImmutableList.of("git", "describe", "--always", "--abbrev=" + ABBREV))
                + System.lineSeparator());
            output.write(getBranchPropertyName() + " = "
                + runCommand(ImmutableList.of("git", "rev-parse", "--abbrev-ref", "HEAD"))
                + System.lineSeparator());
            output.write(getCommitPropertyName() + " = "
                + runCommand(ImmutableList.of("git", "rev-parse", "--short=" + ABBREV, "HEAD"))
                + System.lineSeparator());
        }
    }

    public String runCommand(List<String> command) throws IOException, InterruptedException {

        Process process = new ProcessBuilder(command).start();
        List<String> output = new ArrayList<>();

        BufferedReader bufferedReader = new BufferedReader(
            new InputStreamReader(process.getInputStream()));

        for (;;) {
            String line = bufferedReader.readLine();
            if (line == null) {
                break;
            }
            output.add(line);
        }

        process.waitFor();

        return output.stream().collect(Collectors.joining(System.lineSeparator())).trim();
    }

    /** Override this to create your own subclass for pipeline-side version generation. */
    @OutputFile
    public String getBuildConfiguration() {
        return BUILD_CONFIGURATION;
    }

    @Input
    public String getVersionPropertyName() {
        return versionPropertyName;
    }

    public void setVersionPropertyName(String versionPropertyName) {
        this.versionPropertyName = versionPropertyName;
    }

    @Input
    public String getBranchPropertyName() {
        return branchPropertyName;
    }

    public void setBranchPropertyName(String branchPropertyName) {
        this.branchPropertyName = branchPropertyName;
    }

    @Input
    public String getCommitPropertyName() {
        return commitPropertyName;
    }

    public void setCommitPropertyName(String commitPropertyName) {
        this.commitPropertyName = commitPropertyName;
    }
}
