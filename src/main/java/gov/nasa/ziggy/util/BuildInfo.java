package gov.nasa.ziggy.util;

import static com.google.common.base.Preconditions.checkNotNull;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.exec.CommandLine;

import gov.nasa.ziggy.module.PipelineException;
import gov.nasa.ziggy.services.config.PropertyName;
import gov.nasa.ziggy.services.config.ZiggyConfiguration;
import gov.nasa.ziggy.services.process.ExternalProcess;
import gov.nasa.ziggy.util.AcceptableCatchBlock.Rationale;
import gov.nasa.ziggy.util.io.ZiggyFileUtils;

/**
 * Generates and manages Git information about the version of Ziggy itself, or of a pipeline that
 * runs under Ziggy. The information is written to a properties file for use by the
 * {@link ZiggyConfiguration} API. For Ziggy, the file is named ziggy-build.properties and is saved
 * to ziggy's build/etc directory. For a pipeline, the file is named pipeline-build.properties and
 * is saved to the etc directory under the pipeline's home directory, as defined by the
 * ziggy.pipeline.home.dir property.
 * <p>
 * When called from the command line, the default behavior of {@link BuildInfo} is to produce the
 * pipeline version information file. The user can optionally specify "ZIGGY" or "PIPELINE" at the
 * command line to specify which version information to produce. The command line argument is not
 * case-sensitive.
 *
 * @author PT
 */
public class BuildInfo {

    public enum BuildType {
        ZIGGY(PropertyName.ZIGGY_HOME_DIR, "ziggy.", "ziggy-build.properties"),
        PIPELINE(PropertyName.PIPELINE_HOME_DIR, "pipeline.", "pipeline-build.properties");

        private PropertyName homeDirPropertyName;
        private String propertyPrefix;
        private String buildInfoFilename;

        BuildType(PropertyName homeDirPropertyName, String propertyPrefix,
            String buildInfoFilename) {
            this.homeDirPropertyName = homeDirPropertyName;
            this.propertyPrefix = propertyPrefix;
            this.buildInfoFilename = buildInfoFilename;
        }

        public PropertyName homeDirPropertyName() {
            return homeDirPropertyName;
        }

        public String propertyPrefix() {
            return propertyPrefix;
        }

        public String buildInfoFilename() {
            return buildInfoFilename;
        }
    }

    private static final int ABBREV = 10;
    private static final String GIT_COMMAND = "git";
    static final List<String> VERSION_ARGS = List.of("describe", "--always", "--abbrev=" + ABBREV);
    static final List<String> BRANCH_ARGS = List.of("rev-parse", "--abbrev-ref", "HEAD");
    static final List<String> COMMIT_ARGS = List.of("rev-parse", "--short=" + ABBREV, "HEAD");
    private static final String HEADER = "# This file is automatically generated by Ziggy."
        + System.lineSeparator() + "# Do not edit." + System.lineSeparator();
    private static final String VERSION_DIRECTORY_NAME = "etc";
    private static final String BUILD_VERSION_PROPERTY_NAME_SUFFIX = "version";
    private static final String BUILD_BRANCH_PROPERTY_NAME_SUFFIX = "version.branch";
    private static final String BUILD_COMMIT_PROPERTY_NAME_SUFFIX = "version.commit";
    private static final String PREFIX_OPTION = "prefix";
    private static final String HOME_DIR_OPTION = "home";
    public static final String MISSING_PROPERTY_VALUE = "None provided";

    private final BuildType buildType;
    private String homeDir;

    /**
     * Constructs a {@code BuildInfo} object of the given type that obtains the location of the home
     * directory from the type's homeDirPropertyName property.
     */
    public BuildInfo(BuildType buildType) {
        this(buildType, ZiggyConfiguration.getInstance()
            .getString(buildType.homeDirPropertyName().property(), null));
    }

    /**
     * Constructs a {@code BuildInfo} object of the given type if properties are not available, as
     * is the case when compiling.
     *
     * @param buildType the non-null {@link BuildType} for this object
     * @param homeDir the home directory where
     * {@value #VERSION_DIRECTORY_NAME}/<em>buildType.homeDirPropertyName</em> will be written or
     * read; null is allowed for limited use, but the behavior is undefined
     */
    private BuildInfo(BuildType buildType, String homeDir) {
        this.buildType = checkNotNull(buildType, "buildType");
        this.homeDir = homeDir;
    }

    private Path versionDir() {
        return homeDir != null ? Paths.get(homeDir, VERSION_DIRECTORY_NAME) : null;
    }

    private Path versionFile() {
        Path versionDir = versionDir();
        return versionDir != null ? versionDir.resolve(buildType.buildInfoFilename()) : null;
    }

    private String buildVersionPropertyName() {
        return buildType.propertyPrefix() + BUILD_VERSION_PROPERTY_NAME_SUFFIX;
    }

    private String buildBranchPropertyName() {
        return buildType.propertyPrefix() + BUILD_BRANCH_PROPERTY_NAME_SUFFIX;
    }

    private String buildCommitPropertyName() {
        return buildType.propertyPrefix() + BUILD_COMMIT_PROPERTY_NAME_SUFFIX;
    }

    /** Returns the full output of {@code git describe}. */
    public String getSoftwareVersion() {
        return propertyValue(buildVersionPropertyName());
    }

    private String propertyValue(String property) {
        return buildType == BuildType.ZIGGY ? configuration().getString(property)
            : configuration().getString(property, MISSING_PROPERTY_VALUE);
    }

    /** Returns true if the output of {@code git describe} only contains the tag. */
    public boolean isRelease() {
        return !getSoftwareVersion().endsWith(getRevision());
    }

    /** Returns the current branch. */
    public String getBranch() {
        return propertyValue(buildBranchPropertyName());
    }

    /** Returns the current commit. */
    public String getRevision() {
        return propertyValue(buildCommitPropertyName());
    }

    /** Loads the properties file to an instance of {@link PropertiesConfiguration}. */
    @AcceptableCatchBlock(rationale = Rationale.EXCEPTION_CHAIN)
    private PropertiesConfiguration configuration() {
        try {
            Path versionFile = versionFile();
            PropertiesConfiguration configuration = versionFile != null && Files.exists(versionFile)
                ? new Configurations().properties(versionFile.toFile())
                : new PropertiesConfiguration();
            configuration.setThrowExceptionOnMissing(true);
            return configuration;
        } catch (ConfigurationException e) {
            throw new PipelineException(e);
        }
    }

    public void writeBuildFile() {

        try {
            Files.createDirectories(versionDir());
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }

        File versionFile = versionFile().toFile();
        try (
            Writer fstream = new OutputStreamWriter(new FileOutputStream(versionFile),
                ZiggyFileUtils.ZIGGY_CHARSET);
            BufferedWriter output = new BufferedWriter(fstream)) {
            output.write(HEADER);
            output.write(buildVersionPropertyName() + " = "
                + externalProcessResults(VERSION_ARGS).get(0) + System.lineSeparator());
            output.write(buildBranchPropertyName() + " = "
                + externalProcessResults(BRANCH_ARGS).get(0) + System.lineSeparator());
            output.write(buildCommitPropertyName() + " = "
                + externalProcessResults(COMMIT_ARGS).get(0) + System.lineSeparator());
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    List<String> externalProcessResults(List<String> gitArgs) {
        CommandLine commandLine = new CommandLine(GIT_COMMAND);
        for (String gitArg : gitArgs) {
            commandLine.addArgument(gitArg);
        }
        ExternalProcess externalProcess = ExternalProcess.simpleExternalProcess(commandLine);
        externalProcess.logStdErr(false);
        externalProcess.logStdOut(false);
        externalProcess.writeStdErr(true);
        externalProcess.writeStdOut(true);
        externalProcess.setWorkingDirectory(versionDir().toFile());
        externalProcess.run(true, 0);
        return externalProcess.stdout();
    }

    /** Convenience method for getting the Ziggy software version. */
    public static String ziggyVersion() {
        return new BuildInfo(BuildType.ZIGGY).getSoftwareVersion();
    }

    /** Convenience method for getting the pipeline software version. */
    public static String pipelineVersion() {
        return new BuildInfo(BuildType.PIPELINE).getSoftwareVersion();
    }

    /** Generates the properties file for the pipeline. */
    public static void main(String[] args) throws ParseException {

        String prefix = "pipeline";
        Options options = new Options()
            .addOption(Option.builder("p")
                .longOpt(PREFIX_OPTION)
                .hasArg()
                .desc("Set property and filename prefix (default: " + prefix + ")")
                .build())
            .addOption(Option.builder("h")
                .longOpt(HOME_DIR_OPTION)
                .hasArg()
                .desc("Destination home directory for " + VERSION_DIRECTORY_NAME
                    + "/<prefix>-build.properties")
                .required()
                .build());

        org.apache.commons.cli.CommandLine commandLine = new DefaultParser().parse(options, args);
        if (commandLine.hasOption(PREFIX_OPTION)) {
            prefix = commandLine.getOptionValue(PREFIX_OPTION);
        }
        BuildType versionType = BuildType.valueOf(prefix.toUpperCase());

        new BuildInfo(versionType, commandLine.getOptionValue(HOME_DIR_OPTION)).writeBuildFile();
    }
}
