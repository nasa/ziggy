/*
 * Copyright (C) 2022-2025 United States Government as represented by the Administrator of the
 * National Aeronautics and Space Administration. All Rights Reserved.
 *
 * NASA acknowledges the SETI Institute's primary role in authoring and producing Ziggy, a Pipeline
 * Management System for Data Analysis Pipelines, under Cooperative Agreement Nos. NNX14AH97A,
 * 80NSSC18M0068 & 80NSSC21M0079.
 *
 * This file is available under the terms of the NASA Open Source Agreement (NOSA). You should have
 * received a copy of this agreement with the Ziggy source code; see the file LICENSE.pdf.
 *
 * Disclaimers
 *
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT
 * SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE
 * ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT
 * SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY
 * OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE. FURTHER, GOVERNMENT AGENCY
 * DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE
 * ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
 *
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES
 * GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S
 * USE OF THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES
 * ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
 * RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE
 * EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE,
 * UNILATERAL TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.ziggy.pipeline.xml;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Paths;
import java.util.Set;

import javax.xml.transform.Result;
import javax.xml.transform.stream.StreamResult;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.ImmutableSet;

import gov.nasa.ziggy.data.datastore.DatastoreConfigurationFile;
import gov.nasa.ziggy.data.management.Acknowledgement;
import gov.nasa.ziggy.data.management.Manifest;
import gov.nasa.ziggy.module.PipelineException;
import gov.nasa.ziggy.pipeline.definition.ModelRegistry;
import gov.nasa.ziggy.pipeline.definition.PipelineDefinitionFile;
import gov.nasa.ziggy.services.config.DirectoryProperties;
import gov.nasa.ziggy.services.events.ZiggyEventHandlerFile;
import gov.nasa.ziggy.util.AcceptableCatchBlock;
import gov.nasa.ziggy.util.AcceptableCatchBlock.Rationale;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.SchemaOutputResolver;

/**
 * Exports XML schemas based on JAXB annotations. The schemas describe the XML files that are used
 * to import and export elements of a pipeline definition (modules, pipelines, parameter sets,
 * etc.).
 * <p>
 * Schemas generated by this class during the Ziggy build are used for two purposes. First, they
 * provide validation during marshalling and unmarshalling via the {@link ValidatingXmlManager}
 * class. Second, they provide a schema that can be shared between ground segment elements as part
 * of an Interface Control Document (ICD).
 *
 * @author PT
 */
public class XmlSchemaExporter {

    private static final Logger log = LoggerFactory.getLogger(XmlSchemaExporter.class);
    private static final String DEFAULT_XSD_FILE_NAME = "default.xsd";
    private static String destinationDirectory;

    @AcceptableCatchBlock(rationale = Rationale.SYSTEM_EXIT)
    public static void main(String[] args) {
        try {
            String xmlDir = DirectoryProperties.ziggySchemaBuildDir().toString();
            destinationDirectory = Paths.get(xmlDir, "xml").toString();
            new File(destinationDirectory).mkdirs();
            for (Class<? extends HasXmlSchemaFilename> clazz : XmlSchemaExporter.schemaClasses()) {
                log.info("Generating XML schema for class {}", clazz.getName());
                JAXBContext context = JAXBContext.newInstance(clazz);
                context.generateSchema(new PipelineDefinitionSchemaResolver(clazz));
                log.info("Generating XML schema for class {}...done", clazz.getName());
            }
        } catch (IOException | JAXBException e) {
            log.error("Unable to generate schema", e);
            System.exit(1);
        }
    }

    /**
     * Concrete subclass of {@link SchemaOutputResolver}, used to generate a schema at a specified
     * location with a specified filename.
     *
     * @author PT
     */
    private static final class PipelineDefinitionSchemaResolver extends SchemaOutputResolver {

        private final String schemaFilename;

        @SuppressWarnings("unused")
        public PipelineDefinitionSchemaResolver() {
            schemaFilename = DEFAULT_XSD_FILE_NAME;
        }

        @AcceptableCatchBlock(rationale = Rationale.EXCEPTION_CHAIN)
        public PipelineDefinitionSchemaResolver(Class<? extends HasXmlSchemaFilename> clazz) {
            try {
                schemaFilename = clazz.getDeclaredConstructor()
                    .newInstance()
                    .getXmlSchemaFilename();
            } catch (InstantiationException | IllegalAccessException | IllegalArgumentException
                | InvocationTargetException | NoSuchMethodException | SecurityException e) {
                throw new PipelineException(
                    "Unable to generate schema resolver for class " + clazz.getName(), e);
            }
        }

        @Override
        /**
         * @throws IOException for compatibility with the
         * {@link SchemaOutputResolver#createOutput(String, String)} method in the superclass.
         */
        public Result createOutput(String namespaceUri, String suggestedFileName)
            throws IOException {
            File schemaFile = new File(destinationDirectory, schemaFilename);
            StreamResult result = new StreamResult(schemaFile);
            result.setSystemId(schemaFile.toURI().toURL().toString());
            return result;
        }
    }

    /**
     * Master {@link Set} of classes for which XML schemas are to be generated. Add classes here to
     * automatically add them to the schema generation process.
     */
    public static Set<Class<? extends HasXmlSchemaFilename>> schemaClasses() {
        return ImmutableSet.of(PipelineDefinitionFile.class, DatastoreConfigurationFile.class,
            ParameterLibrary.class, ModelRegistry.class, Manifest.class, Acknowledgement.class,
            ZiggyEventHandlerFile.class);
    }
}
