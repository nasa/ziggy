package gov.nasa.ziggy.uow;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import gov.nasa.ziggy.module.PipelineException;
import gov.nasa.ziggy.pipeline.definition.TypedParameter;
import gov.nasa.ziggy.util.AcceptableCatchBlock;
import gov.nasa.ziggy.util.AcceptableCatchBlock.Rationale;

/**
 * Defines a UOW generator in which the units of work are based on the subdirectories of a parent
 * directory.
 *
 * @author PT
 */
public abstract class DirectoryUnitOfWorkGenerator implements UnitOfWorkGenerator {

    public static final String DIRECTORY_PARAMETER_NAME = "directory";
    public static final String REGEX_PROPERTY_NAME = "taskDirectoryRegex";
    public static final String DIRECTORY_NAME_SEPARATOR = ":";

    /**
     * Convenience method that extracts the directory from a UOW instance constructed by a subclass
     * of {@link DirectoryUnitOfWorkGenerator}. If the UOW has more than one directory typed
     * parameter, the values are returned in the form produced by the toString() method of Java
     * {@link List}s.
     */
    public static String directory(UnitOfWork uow) {
        checkUowClass(uow);
        List<String> directories = directories(uow);
        if (directories.size() == 0) {
            return "";
        }
        if (directories.size() == 1) {
            return directories.get(0);
        }
        return directories.toString();
    }

    /** Returns a {@link List} of directories for the given UOW. */
    public static List<String> directories(UnitOfWork uow) {
        checkUowClass(uow);
        return uow.getParameters()
            .stream()
            .filter(s -> s.getName().startsWith(DIRECTORY_PARAMETER_NAME))
            .map(TypedParameter::getString)
            .collect(Collectors.toList());
    }

    /** Returns a {@link Map} from data file type names to directories in a UOW. */
    public static Map<String, String> directoriesByDataFileType(UnitOfWork uow) {
        checkUowClass(uow);
        Map<String, String> directoriesByDataFileType = new HashMap<>();
        for (TypedParameter parameter : uow.getParameters()) {
            if (parameter.getName().startsWith(DIRECTORY_PARAMETER_NAME)) {
                String[] splitParameterName = parameter.getName().split(DIRECTORY_NAME_SEPARATOR);
                directoriesByDataFileType.put(splitParameterName[1], parameter.getString());
            }
        }
        return directoriesByDataFileType;
    }

    /** Ensures that the UOW was generated by a DirectoryUnitOfWorkGenerator subclass. */
    @AcceptableCatchBlock(rationale = Rationale.EXCEPTION_CHAIN)
    private static void checkUowClass(UnitOfWork uow) {
        String generatorClassName = uow
            .getParameter(UnitOfWorkGenerator.GENERATOR_CLASS_PARAMETER_NAME)
            .getString();
        try {
            Class<?> clazz = Class.forName(generatorClassName);
            if (!DirectoryUnitOfWorkGenerator.class.isAssignableFrom(clazz)) {
                throw new PipelineException("Class " + generatorClassName
                    + " not a subclass of DirectoryUnitOfWorkGenerator");
            }
        } catch (ClassNotFoundException e) {
            throw new PipelineException("Generator class " + generatorClassName + " not found", e);
        }
    }

    /**
     * Returns the directory to be used as the top-level directory for generation of UOW instances,
     * as a {@link Path}.
     */
    protected abstract Path rootDirectory();
}
